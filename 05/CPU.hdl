// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=out1,sel=instruction[15],out=ina);
    Nand(a=instruction[15], b=instruction[15], out=negat);
    Or(a=negat,b=instruction[5],out=load1);
    ARegister(in=ina,load=load1,out=out2,out[0..14]=addressM);
    Mux16(a=out2,b=inM,sel=instruction[12],out=out3);
    Nand(a=instruction[11], b=instruction[15], out=test);
    Nand(a=test, b=test, out=outtest);
   
    Nand(a=instruction[10],b=instruction[15],out=out5a);
    Nand(a=out5a, b=out5a, out=out5);
    Or(a=instruction[9],b=negat,out=out6);
    Or(a=instruction[8],b=negat,out=out7);
    Nand(a=instruction[7],b=instruction[15],out=out8a);
    Nand(a=out8a, b=out8a, out=out8);
    Nand(a=instruction[6],b=instruction[15],out=out9a);
    Nand(a=out9a, b=out9a, out=out9);
    
    ALU(x=x1,y=out3,zx=outtest,nx=out5,zy=out6,ny=out7,f=out8,no=out9,out=outM,out=out1,zr=zr1,ng=ng1);
    Nand(a=instruction[15],b=instruction[3],out=writeM1);
    Nand(a=writeM1, b=writeM1, out=writeM);
    Nand(a=instruction[15],b=instruction[4],out=out12a);
    Nand(a=out12a, b=out12a, out=out12);
    //And(a=instruction[15],b=instruction[3],out=writeM);
    //And(a=instruction[15],b=instruction[4],out=out12);
    DRegister(in=out1,load=out12,out=x1);
    Or(a=zr1,b=ng1,out=out13);
    Nand(a=out13, b=out13, out=out14);
    Nand(a=instruction[0],b=out14,out=out15a);
    Nand(a=out15a, b=out15a, out=out15);
    Nand(a=instruction[1],b=zr1,out=out16a);
    Nand(a=out16a, b=out16a, out=out16);
    Nand(a=instruction[2],b=ng1,out=out17a);
    Nand(a=out17a, b=out17a, out=out17);
   
    Or(a=out17,b=out16,out=out18);
    Or(a=out18,b=out15,out=out19);
    
    Nand(a=out19,b=instruction[15],out=out20a);
    Nand(a=out20a, b=out20a, out=out20);
    PC(in=out2,load=out20,reset=reset,inc=true,out[0..14]=pc);
}